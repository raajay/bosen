#!/usr/bin/env python

"""
This script starts a process locally, using <client-id> <hostfile> as inputs.
"""

import os
from os.path import dirname
from os.path import join
import time
import sys

if len(sys.argv) != 3:
  print "usage: %s <client-id> <hostfile>" % sys.argv[0]
  sys.exit(1)

# Please set the absolute path to app dir
app_dir = ""

client_id = sys.argv[1]
hostfile = sys.argv[2]
proj_dir = dirname(dirname(app_dir))

params = {
    "train_file": "hdfs://<ip>:<port>/path/to/data/sample.txt"
    , "total_num_of_training_samples": 100
    , "num_epochs": 40
    , "mini_batch_size": 10
    , "num_centers": 10
    , "dimensionality": 10
    , "load_clusters_from_disk": "false"  # "false" to use random init
    # Set this path
    , "output_file_prefix": "hdfs://<ip>:<port>/path/to/data/out"
    }

petuum_params = {
    "hostfile": hostfile
    , "num_app_threads": 2
    , "staleness": 2
    , "num_comm_channels_per_client": 1 # 1~2 are usually enough.
    }

prog_name = "kmeans_main"
build_dir = "build"
app_name = app_dir.split('/')[-1]
prog_path = os.path.join(proj_dir, build_dir, "app", app_name, prog_name)


env_params = (
  "GLOG_logtostderr=true "
  "GLOG_v=-1 "
  "GLOG_minloglevel=0 "
  )

# Get host IPs
with open(hostfile, "r") as f:
  hostlines = f.read().splitlines()
host_ips = [line.split()[1] for line in hostlines]
petuum_params["num_clients"] = len(host_ips)

# os.system is synchronous call.
os.system("killall -q " + prog_name)
print "Done killing"

cmd = "export CLASSPATH=`hadoop classpath --glob`:$CLASSPATH; "
cmd += env_params + prog_path
petuum_params["client_id"] = client_id
cmd += "".join([" --%s=%s" % (k,v) for k,v in petuum_params.items()])
cmd += "".join([" --%s=%s" % (k,v) for k,v in params.items()])
print cmd
os.system(cmd)
